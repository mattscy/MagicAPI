{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"test","title":"Home"},{"location":"api/magic/","text":"Magic The Magic class is the core class of the system. It manages your mana and provides all the functions that you can use to manipulate objects in the game. Mana is a measurement of your magical potential, similarly to how stamina is a measurement of physical potential. You can spend mana to achieve all kinds of magical effects. Most of the functions in the Magic class cost an amount of mana depending on the arguments that you give. For example, the Magic:Fling function can be used to fling an object by temporarily setting its velocity. However, using a velocity with a larger magnitude will cost more mana. It is also important keep in mind that using functions on enemy objects is often more expensive than using the same functions on friendly objects. This class also lets you retrieve the Character object that represents your character using the Mana:GetMyCharacter function. Your script will only run after your character is completely loaded every time you respawn, so you don't have to worry about waiting for anything. Functions Character GetMyCharacter() [ Object ] CreateObject(string name, [Object relativeTo, (Vector3|CFrame) offset]) [ Object ] GetObject ( HitDetails hitObjectDetails ) Subscription, Object GetLingeringObject(HitDetails hitObjectDetails) void ChargeDamage(Object object, int amount) Subscription Follow(Object object, Object target, (Vector3|CFrame) offset) Subscription SetVelocity(Object object, Vector3 velocity) Subscription Watch(Object pointing, (Object|Mouse) target, [(Vector3|CFrame) targetOffset]) void LookAt(Object pointing, (Object|Mouse) target, [(Vector3|CFrame) targetOffset]) void Fling ( Object object , Vector3 velocity , [ float duration ]) Subscription , RBXScriptSignal -> ( bool entered , HitDetails detectedDetails ) GetRadiusDetectionSignal ( Object detecting , float radius ) Events ManaChanged -> ( int currentMana , int maxMana )","title":"Magic"},{"location":"api/magic/#magic","text":"The Magic class is the core class of the system. It manages your mana and provides all the functions that you can use to manipulate objects in the game. Mana is a measurement of your magical potential, similarly to how stamina is a measurement of physical potential. You can spend mana to achieve all kinds of magical effects. Most of the functions in the Magic class cost an amount of mana depending on the arguments that you give. For example, the Magic:Fling function can be used to fling an object by temporarily setting its velocity. However, using a velocity with a larger magnitude will cost more mana. It is also important keep in mind that using functions on enemy objects is often more expensive than using the same functions on friendly objects. This class also lets you retrieve the Character object that represents your character using the Mana:GetMyCharacter function. Your script will only run after your character is completely loaded every time you respawn, so you don't have to worry about waiting for anything.","title":"Magic"},{"location":"api/magic/#functions","text":"Character GetMyCharacter() [ Object ] CreateObject(string name, [Object relativeTo, (Vector3|CFrame) offset]) [ Object ] GetObject ( HitDetails hitObjectDetails ) Subscription, Object GetLingeringObject(HitDetails hitObjectDetails) void ChargeDamage(Object object, int amount) Subscription Follow(Object object, Object target, (Vector3|CFrame) offset) Subscription SetVelocity(Object object, Vector3 velocity) Subscription Watch(Object pointing, (Object|Mouse) target, [(Vector3|CFrame) targetOffset]) void LookAt(Object pointing, (Object|Mouse) target, [(Vector3|CFrame) targetOffset]) void Fling ( Object object , Vector3 velocity , [ float duration ]) Subscription , RBXScriptSignal -> ( bool entered , HitDetails detectedDetails ) GetRadiusDetectionSignal ( Object detecting , float radius )","title":"Functions"},{"location":"api/magic/#events","text":"ManaChanged -> ( int currentMana , int maxMana )","title":"Events"},{"location":"api/magic/GetMyCharacter/","text":"GetMyCharacter","title":"GetMyCharacter"},{"location":"api/magic/GetMyCharacter/#getmycharacter","text":"","title":"GetMyCharacter"},{"location":"api/object/","text":"Object All objects that you can manipulate in the game are inherited from the Object class. Models, parts and characters are all examples of objects that you can use magic on. An object can either be classified as \"friendly\" if it belongs to you or one of your teammates, \"enemy\" if it belongs to a player on another team, and \"neutral\" otherwise. After a certain amount of time passes, an object will expire, and you can no longer call its methods or use it in the Magic class. The lifetime of an object is different depending on how it is obtained: - If obtained from the Magic:GetObject function, the object will expire after any yield. - If obtained from the Magic:GetLingeringObject function, the object will expire after the returned subscription is cancelled. - Any objects will expire after they are destroyed. However, some HitDetails objects have an associated lifetime that will be used instead of the above conditions. For example, the HitDetails that is obtained from Magic:GetRadiusDetectionSignal when entered is true will give an object that expires after the object leaves the radius, rather than after an amount of time. Functions Vector3 GetSize() Vector3 GetVelocity() CFrame GetCFrame() string GetName() bool IsType(string type) bool IsExpired() bool IsEnemy() bool IsFriendly() bool IsNeutral() bool IsMine() Object GetSubObject(string name) AnimationTrack LoadAnimation(int animationID) Events Expiring -> ( bool wasDestroyed ) Touched -> ( HitDetails touchedObjectDetails )","title":"Object"},{"location":"api/object/#object","text":"All objects that you can manipulate in the game are inherited from the Object class. Models, parts and characters are all examples of objects that you can use magic on. An object can either be classified as \"friendly\" if it belongs to you or one of your teammates, \"enemy\" if it belongs to a player on another team, and \"neutral\" otherwise. After a certain amount of time passes, an object will expire, and you can no longer call its methods or use it in the Magic class. The lifetime of an object is different depending on how it is obtained: - If obtained from the Magic:GetObject function, the object will expire after any yield. - If obtained from the Magic:GetLingeringObject function, the object will expire after the returned subscription is cancelled. - Any objects will expire after they are destroyed. However, some HitDetails objects have an associated lifetime that will be used instead of the above conditions. For example, the HitDetails that is obtained from Magic:GetRadiusDetectionSignal when entered is true will give an object that expires after the object leaves the radius, rather than after an amount of time. Functions Vector3 GetSize() Vector3 GetVelocity() CFrame GetCFrame() string GetName() bool IsType(string type) bool IsExpired() bool IsEnemy() bool IsFriendly() bool IsNeutral() bool IsMine() Object GetSubObject(string name) AnimationTrack LoadAnimation(int animationID) Events Expiring -> ( bool wasDestroyed ) Touched -> ( HitDetails touchedObjectDetails )","title":"Object"}]}