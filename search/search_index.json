{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"im not sure what to put here please see the magic page","title":"Home"},{"location":"api/hitdetails/","text":"HitDetails A HitDetails instance is given whenever you detect another object, such as through the Touched event. The purpose of this class is to let you check the details of an object that you have detected before you decide to pay for a reference to it. If you do decide that you want a reference, you can pay for the object with the Magic:GetObject or Magic:GetLingeringObject methods. For balancing reasons, HitDetails instances expire as soon as there is any yield, so you can't wait before getting an object from a HitDetails . Functions bool IsEnemy() bool IsFriendly() bool IsTerrain() bool IsMine() bool IsType(string type)","title":"HitDetails"},{"location":"api/hitdetails/#hitdetails","text":"A HitDetails instance is given whenever you detect another object, such as through the Touched event. The purpose of this class is to let you check the details of an object that you have detected before you decide to pay for a reference to it. If you do decide that you want a reference, you can pay for the object with the Magic:GetObject or Magic:GetLingeringObject methods. For balancing reasons, HitDetails instances expire as soon as there is any yield, so you can't wait before getting an object from a HitDetails .","title":"HitDetails"},{"location":"api/hitdetails/#functions","text":"bool IsEnemy() bool IsFriendly() bool IsTerrain() bool IsMine() bool IsType(string type)","title":"Functions"},{"location":"api/magic/","text":"Magic The Magic class is the core class of the system. It manages your mana and provides all the functions that you can use to manipulate objects in the game. Mana is a measurement of your magical potential, similarly to how stamina is a measurement of physical potential. You can spend mana to achieve all kinds of magical effects. Most of the functions in the Magic class cost an amount of mana depending on the arguments that you give. For example, the Magic:Fling function can be used to fling an object by temporarily setting its velocity. However, using a velocity with a larger magnitude will cost more mana. It is also important keep in mind that using functions on enemy objects is often more expensive than using the same functions on friendly objects. This class also lets you retrieve the Character object that represents your character using the Mana:GetMyCharacter function. Your script will only run after your character is completely loaded every time you respawn, so you don't have to worry about waiting for anything. Functions Character GetMyCharacter () Returns an object that represents your character. Object CreateObject(string name, [ Object relativeTo, (Vector3|CFrame) offset]) Creates a new object from a name. Object GetObject( HitDetails hitObjectDetails) Returns an object from a HitDetails that expires immediately. Subscription , Object GetLingeringObject(HitDetails hitObjectDetails) Returns an object from a HitDetails that expires after the subscription is cancelled. void ChargeDamage( Object object, int amount) Charges an object with an amount of damage. Subscription Follow( Object object, Object target, (Vector3|CFrame) offset) Makes an object follow a target object at a constant offset. Subscription SetVelocity( Object object, Vector3 velocity) Gives an object a constant velocity until the subscription is cancelled. Subscription Watch( Object pointing, ( Object |Mouse) target, [(Vector3|CFrame) targetOffset]) Makes an object point towards another object until the subscription is cancelled. void LookAt( Object pointing, ( Object |Mouse) target, [(Vector3|CFrame) targetOffset]) Makes an object point towards another object. void Fling( Object object, Vector3 velocity, [float duration]) Gives an object an instantaneous thrust that overrides all other forces until the duration passes. Subscription , RBXScriptSignal -> (bool entered, HitDetails detectedDetails) GetRadiusDetectionSignal( Object detecting, float radius) Returns an event that fires when something enters the radius of an object until the subscription is cancelled. Events ManaChanged -> (int currentMana, int maxMana)","title":"Magic"},{"location":"api/magic/#magic","text":"The Magic class is the core class of the system. It manages your mana and provides all the functions that you can use to manipulate objects in the game. Mana is a measurement of your magical potential, similarly to how stamina is a measurement of physical potential. You can spend mana to achieve all kinds of magical effects. Most of the functions in the Magic class cost an amount of mana depending on the arguments that you give. For example, the Magic:Fling function can be used to fling an object by temporarily setting its velocity. However, using a velocity with a larger magnitude will cost more mana. It is also important keep in mind that using functions on enemy objects is often more expensive than using the same functions on friendly objects. This class also lets you retrieve the Character object that represents your character using the Mana:GetMyCharacter function. Your script will only run after your character is completely loaded every time you respawn, so you don't have to worry about waiting for anything.","title":"Magic"},{"location":"api/magic/#functions","text":"Character GetMyCharacter () Returns an object that represents your character. Object CreateObject(string name, [ Object relativeTo, (Vector3|CFrame) offset]) Creates a new object from a name. Object GetObject( HitDetails hitObjectDetails) Returns an object from a HitDetails that expires immediately. Subscription , Object GetLingeringObject(HitDetails hitObjectDetails) Returns an object from a HitDetails that expires after the subscription is cancelled. void ChargeDamage( Object object, int amount) Charges an object with an amount of damage. Subscription Follow( Object object, Object target, (Vector3|CFrame) offset) Makes an object follow a target object at a constant offset. Subscription SetVelocity( Object object, Vector3 velocity) Gives an object a constant velocity until the subscription is cancelled. Subscription Watch( Object pointing, ( Object |Mouse) target, [(Vector3|CFrame) targetOffset]) Makes an object point towards another object until the subscription is cancelled. void LookAt( Object pointing, ( Object |Mouse) target, [(Vector3|CFrame) targetOffset]) Makes an object point towards another object. void Fling( Object object, Vector3 velocity, [float duration]) Gives an object an instantaneous thrust that overrides all other forces until the duration passes. Subscription , RBXScriptSignal -> (bool entered, HitDetails detectedDetails) GetRadiusDetectionSignal( Object detecting, float radius) Returns an event that fires when something enters the radius of an object until the subscription is cancelled.","title":"Functions"},{"location":"api/magic/#events","text":"ManaChanged -> (int currentMana, int maxMana)","title":"Events"},{"location":"api/magic/GetMyCharacter/","text":"GetMyCharacter","title":"GetMyCharacter"},{"location":"api/magic/GetMyCharacter/#getmycharacter","text":"","title":"GetMyCharacter"},{"location":"api/object/","text":"Object All objects that you can manipulate in the game are inherited from the Object class. Models, parts and characters are all examples of objects that you can use magic on. An object can either be classified as \"friendly\" if it belongs to you or one of your teammates, \"enemy\" if it belongs to a player on another team, and \"neutral\" otherwise. After a certain amount of time passes, an object will expire, and you can no longer call its methods or use it in the Magic class. The lifetime of an object is different depending on how it is obtained: - If obtained from the Magic:GetObject function, the object will expire after any yield. - If obtained from the Magic:GetLingeringObject function, the object will expire after the returned subscription is cancelled. - Any objects will expire after they are destroyed. However, some HitDetails objects have an associated lifetime that will be used instead of the above conditions. For example, the HitDetails that is obtained from Magic:GetRadiusDetectionSignal when entered is true will give an object that expires after the object leaves the radius, rather than after an amount of time. Functions Vector3 GetSize() Vector3 GetVelocity() CFrame GetCFrame() string GetName() bool IsType(string type) bool IsExpired() bool IsEnemy() bool IsFriendly() bool IsNeutral() bool IsMine() Object GetSubObject(string name) Gets a sub-object thats inside of the object (e.g. a part that is inside a model). AnimationTrack LoadAnimation(int animationID) Events Expiring -> (bool wasDestroyed) Touched -> ( HitDetails touchedObjectDetails)","title":"Object"},{"location":"api/object/#object","text":"All objects that you can manipulate in the game are inherited from the Object class. Models, parts and characters are all examples of objects that you can use magic on. An object can either be classified as \"friendly\" if it belongs to you or one of your teammates, \"enemy\" if it belongs to a player on another team, and \"neutral\" otherwise. After a certain amount of time passes, an object will expire, and you can no longer call its methods or use it in the Magic class. The lifetime of an object is different depending on how it is obtained: - If obtained from the Magic:GetObject function, the object will expire after any yield. - If obtained from the Magic:GetLingeringObject function, the object will expire after the returned subscription is cancelled. - Any objects will expire after they are destroyed. However, some HitDetails objects have an associated lifetime that will be used instead of the above conditions. For example, the HitDetails that is obtained from Magic:GetRadiusDetectionSignal when entered is true will give an object that expires after the object leaves the radius, rather than after an amount of time.","title":"Object"},{"location":"api/object/#functions","text":"Vector3 GetSize() Vector3 GetVelocity() CFrame GetCFrame() string GetName() bool IsType(string type) bool IsExpired() bool IsEnemy() bool IsFriendly() bool IsNeutral() bool IsMine() Object GetSubObject(string name) Gets a sub-object thats inside of the object (e.g. a part that is inside a model). AnimationTrack LoadAnimation(int animationID)","title":"Functions"},{"location":"api/object/#events","text":"Expiring -> (bool wasDestroyed) Touched -> ( HitDetails touchedObjectDetails)","title":"Events"},{"location":"api/subscription/","text":"Subscription Subscription instances are returned from any function in the Magic class that charges mana at a continuous rate rather than a one-time payment. When a subscription is cancelled, you stop paying mana for that function, and the effect of the function is stopped. Subscriptions can be cancelled in one of four ways: 1. You manually cancel the subscription with Subscription:Cancel() . 2. If any of the objects you are using the function on expire, the subscription will be cancelled. 3. If you don't have enough mana left to pay for a subscription, it will be cancelled. 4. When you reuse the same function on the same object, it will cancel the previous subscription. In this case, the overridden parameter of Subscription.Cancelled will be set to true. Functions void Cancel() bool IsCancelled() int GetRate() int GetTotalSpent() Events Cancelled -> ( bool overridden )","title":"Subscription"},{"location":"api/subscription/#subscription","text":"Subscription instances are returned from any function in the Magic class that charges mana at a continuous rate rather than a one-time payment. When a subscription is cancelled, you stop paying mana for that function, and the effect of the function is stopped. Subscriptions can be cancelled in one of four ways: 1. You manually cancel the subscription with Subscription:Cancel() . 2. If any of the objects you are using the function on expire, the subscription will be cancelled. 3. If you don't have enough mana left to pay for a subscription, it will be cancelled. 4. When you reuse the same function on the same object, it will cancel the previous subscription. In this case, the overridden parameter of Subscription.Cancelled will be set to true.","title":"Subscription"},{"location":"api/subscription/#functions","text":"void Cancel() bool IsCancelled() int GetRate() int GetTotalSpent()","title":"Functions"},{"location":"api/subscription/#events","text":"Cancelled -> ( bool overridden )","title":"Events"}]}